export const embeddedFiles = {"src/bootstrap/controller/root-application.yaml":"apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: root-application\n  namespace: argocd\n  finalizers:\n    - resources-finalizer.argocd.argoproj.io\nspec:\n  project: default\n  destination:\n    namespace: argocd\n    server: https://kubernetes.default.svc\n  source:\n    path: cndi/cluster\n    repoURL: https://github.com/polyseam/cndi-next-example-cluster\n    targetRevision: HEAD\n    directory:\n      recurse: true\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions:\n      - CreateNamespace=true","src/bootstrap/controller/bootstrap.sh":"#!/bin/bash\n\njoinToken=`cat /home/ubuntu/controller/join-token.txt`\n\necho \"microk8s add-node: creating node invite with token $joinToken\"\n\nmicrok8s add-node -t $joinToken -l 600\n\necho \"token registered\"\n\necho \"configuring argo\"\n\nmicrok8s kubectl apply -f /home/ubuntu/controller/repo-config.yaml\nmicrok8s kubectl apply -f /home/ubuntu/controller/root-application.yaml\n\necho \"argo configured\"\n\necho \"checking microk8s status\"\n\nmicrok8s status\n","src/bootstrap/controller/join-token.txt":"90e6f615fb01441aa1aa8597f50d1784","src/bootstrap/controller/repo-config.yaml":"apiVersion: v1\nkind: Secret\nmetadata:\n  name: private-repo\n  namespace: argocd\n  labels:\n    argocd.argoproj.io/secret-type: repository\nstringData:\n  url: https://github.com/polyseam/cndi-next-example-cluster\n  username: johnstonmatt\n  password: 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","src/bootstrap/controller/application.yaml":"apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: root-application\n  namespace: argocd\n  finalizers:\n    - resources-finalizer.argocd.argoproj.io\nspec:\n  project: default\n  destination:\n    namespace: argocd\n    server: https://kubernetes.default.svc\n  source:\n    path: cndi/cluster\n    repoURL: https://github.com/polyseam/cndi-next-example-cluster\n    targetRevision: HEAD\n    directory:\n      recurse: true\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions:\n      - CreateNamespace=true","src/bootstrap/README.md":"The contents of the `controller` directory will be copied to each vm with the role `\"controller\"` in your microk8s cluster\n\nThe contents of the `worker` directory will be copied to each vm with the role `\"worker\"` in your microk8s cluster\n\nWhen all the files are copied to a node, we run `/${role}/bootstrap.sh` on the node, and it does the final runtime setup","src/bootstrap/worker/bootstrap.sh":"#!/bin/bash\n\necho \"Joining the cluster with invite\"\n\n. /home/ubuntu/worker/accept-invite.sh","src/bootstrap/worker/accept-invite.sh":"#!/bin/bash\necho \"accepting node invite with token 90e6f615fb01441aa1aa8597f50d1784\"\nmicrok8s join 172.31.85.18:25000/90e6f615fb01441aa1aa8597f50d1784 --worker","src/github/CNDI_GITHUB_README.md":"# CNDI GitHub Workflows\n\nWe have created this file and a file called `.github/workflows/cndi-run.yaml`\n\nThe workflow file is responsible for provisioning the nodes you have defined in `cndi/nodes.json`.\n\nEffectively this means that the `cndi-run.yaml` workflow is only responsible for executing the command `cndi run`.\n\nAll other cluster tasks will be handled by argocd, by reading the manifests in `cndi/cluster` and the folders within that.\n","src/github/workflows/cndi-run.yaml":"name: cndi\non:\n  push:\n    branches:\n      - main\n      - 'releases/**'\njobs:\n  cndi-run:\n    runs-on: ubuntu-20.04\n    steps:\n      - name: welcome\n        run: echo \"welcome to cndi!\"\n      - name: checkout\n        uses: actions/checkout@v2\n        with:\n          fetch-depth: 0\n      - name: validate-nodes\n        uses: johnstonmatt/is-valid-json-action@v.1.0.1\n        with:\n          path-to-file: cndi/nodes.json\n      - name: setup cndi\n        uses: polyseam/setup-cndi\n      - name: cndi run\n        run: cndi run\n\n# TODO: https://docs.github.com/en/actions/creating-actions/developing-a-third-party-cli-action\n"}
// This file is generated automatically, do not edit!
export const embeddedFiles = {
  "src/github/workflows/cndi-run.yaml":
    "name: cndi\non:\n  push:\n    branches:\n      - main\n      - 'releases/**'\njobs:\n  cndi-run:\n    runs-on: ubuntu-20.04\n    steps:\n      - name: welcome\n        run: echo \"welcome to cndi!\"\n\n      - name: checkout state\n        uses: actions/checkout@v3\n        continue-on-error: true # first run has no state branch\n        with:\n          fetch-depth: 0\n          ref: '_state'\n\n      - name: save state\n        run: mv ./terraform.tfstate.gpg ~/terraform.tfstate.gpg\n        continue-on-error: true # first run has no state\n      \n      - name: echo state\n        run: stat ~/terraform.tfstate.gpg\n        continue-on-error: true # first run has no state\n\n      - name: checkout repo\n        uses: actions/checkout@v2\n        with:\n          fetch-depth: 0\n\n      - name: decrypt terraform state\n        run: gpg --batch --passphrase ${{ secrets.TERRAFORM_STATE_PASSPHRASE }} -d ~/terraform.tfstate.gpg > cndi/terraform/terraform.tfstate\n        continue-on-error: true # if we try to encrypt a non-existent tfstate file, that's fine\n\n      - name: show decrypted state\n        run: cat cndi/terraform/terraform.tfstate\n\n      - name: setup cndi\n        uses: polyseam/setup-cndi@1.0.3\n        with:\n          version: main\n\n      - name: cndi chmod\n        run: chmod +x bin/cndi # make cndi cli executable\n\n      - name: cndi install\n        run: bin/cndi install # run 'cndi install'\n\n      # this next step is the core of the workflow\n      - name: cndi run\n        env:\n          GIT_REPO:  https://github.com/${{ github.repository}}\n          GIT_USERNAME: ${{ secrets.GIT_USERNAME }}\n          GIT_PASSWORD: ${{ secrets.GIT_PASSWORD }}\n          ARGOUI_READONLY_PASSWORD: ${{ secrets.ARGOUI_READONLY_PASSWORD }}\n          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          AWS_REGION: ${{ secrets.AWS_REGION }}\n          SEALED_SECRETS_PRIVATE_KEY_MATERIAL: ${{ secrets.SEALED_SECRETS_PRIVATE_KEY_MATERIAL }}\n          SEALED_SECRETS_PUBLIC_KEY_MATERIAL: ${{ secrets.SEALED_SECRETS_PUBLIC_KEY_MATERIAL }}\n        run: bin/cndi run  # run 'cndi run'\n\n      - name: move state out of repo\n        run: mv cndi/terraform/terraform.tfstate ~/\n      \n      - name: encrypt terraform state\n        run: gpg --symmetric --batch --yes --passphrase ${{ secrets.TERRAFORM_STATE_PASSPHRASE }}  ~/terraform.tfstate\n\n      - name: remove repo contents\n        run: git rm -r .\n\n      - name: assess damages\n        run: git status\n\n      - name: copy encrypted state back into repo\n        run: 'mv ~/terraform.tfstate.gpg .'\n\n      - name: persist terraform state\n        uses: EndBug/add-and-commit@v9\n        with:\n          new_branch: _state\n          push: origin _state --set-upstream --force\n          add: terraform.tfstate.gpg\n          commiter_name: CNDI Bot",
  "src/templates/airflow-tls.jsonc":
    '{\n  "nodes": {\n    "entries": [\n      {\n        "name": "x-controller",\n        "role": "controller",\n        "kind": "aws",\n        "instance_type": "m5a.xlarge",\n        "volume_size": 128 // GiB\n      },\n      {\n        "name": "x-worker",\n        "role": "worker",\n        "kind": "aws",\n        "instance_type": "m5a.large",\n        "volume_size": 128\n      }\n    ]\n  },\n  "cluster": {\n    "git-credentials-secret": {\n      "apiVersion": "v1",\n      "kind": "Secret",\n      "metadata": {\n        "name": "airflow-git-credentials",\n        "namespace": "airflow"\n      },\n      "stringData": {\n        "GIT_SYNC_USERNAME": "$.cndi.secrets.GIT_USERNAME",\n        "GIT_SYNC_PASSWORD": "$.cndi.secrets.GIT_PASSWORD"\n      }\n    },\n    "cert-manager-cluster-issuer": {\n      "apiVersion": "cert-manager.io/v1",\n      "kind": "ClusterIssuer",\n      "metadata": {\n        "name": "lets-encrypt"\n      },\n      "spec": {\n        "acme": {\n          "email": "matt.johnston@polyseam.io",\n          "server": "https://acme-v02.api.letsencrypt.org/directory",\n          "privateKeySecretRef": {\n            "name": "lets-encrypt-private-key"\n          },\n          "solvers": [\n            {\n              "http01": {\n                "ingress": {\n                  "class": "public"\n                }\n              }\n            }\n          ]\n        }\n      }\n    },\n    "argo-ingress": {\n      "apiVersion": "networking.k8s.io/v1",\n      "kind": "Ingress",\n      "metadata": {\n        "name": "argocd-server-ingress",\n        "namespace": "argocd",\n        "annotations": {\n          "cert-manager.io/cluster-issuer": "lets-encrypt",\n          "kubernetes.io/tls-acme": "true",\n          "nginx.ingress.kubernetes.io/ssl-passthrough": "true",\n          "nginx.ingress.kubernetes.io/backend-protocol": "HTTPS"\n        }\n      },\n      "spec": {\n        "tls": [\n          {\n            "hosts": ["argocd.cndi.xyz"],\n            "secretName": "lets-encrypt-private-key"\n          }\n        ],\n        "rules": [\n          {\n            "host": "argocd.cndi.xyz",\n            "http": {\n              "paths": [\n                {\n                  "path": "/",\n                  "pathType": "Prefix",\n                  "backend": {\n                    "service": {\n                      "name": "argocd-server",\n                      "port": {\n                        "name": "https"\n                      }\n                    }\n                  }\n                }\n              ]\n            }\n          }\n        ]\n      }\n    }\n  },\n  "applications": {\n    "airflow": {\n      "targetRevision": "1.7.0",\n      "destinationNamespace": "airflow",\n      "repoURL": "https://airflow.apache.org",\n      "chart": "airflow",\n      "values": {\n        "dags": {\n          "gitSync": {\n            "enabled": true,\n            "repo": "https://github.com/johnstonmatt/demo-dag-bag", // private repo that requires credentials\n            "credentialsSecret": "airflow-git-credentials",\n            "branch": "main",\n            "wait": 40,\n            "subPath": "dags"\n          }\n        },\n        "config": {\n          "webserver": {\n            "expose_config": "True",\n            "instance_name": "Polyseam",\n            "enable_proxy_fix": "True",\n            "base_url": "https://airflow.cndi.xyz"\n          },\n          "operators": {\n            "default_owner": "Polyseam"\n          }\n        },\n        "ingress": {\n          "web": {\n            "enabled": true,\n            "annotations": {\n              "cert-manager.io/cluster-issuer": "lets-encrypt"\n            },\n            "hosts": [\n              {\n                "name": "airflow.cndi.xyz",\n                "tls": {\n                  "secretName": "lets-encrypt-private-key",\n                  "enabled": true\n                }\n              }\n            ]\n          }\n        },\n        "logs": {\n          "persistence": {\n            "enabled": true,\n            "size": "15Gi"\n          }\n        },\n        "createUserJob": {\n          "useHelmHooks": false\n        },\n        "migrateDatabaseJob": {\n          "useHelmHooks": false\n        }\n      }\n    }\n  }\n}\n',
  "src/templates/basic.jsonc":
    '{\n  "nodes": {\n    "entries": [\n      {\n        "name": "x-controller",\n        "role": "controller",\n        "kind": "aws",\n        "instance_type": "m5a.xlarge",\n        "volume_size": 128 // GiB\n      },\n      {\n        "name": "x-worker",\n        "role": "worker",\n        "kind": "aws",\n        "instance_type": "m5a.large",\n        "volume_size": 128\n      }\n    ]\n  },\n  "cluster": {\n    "argo-ingress": {\n      "apiVersion": "networking.k8s.io/v1",\n      "kind": "Ingress",\n      "metadata": {\n        "name": "argocd-server-ingress",\n        "namespace": "argocd",\n        "annotations": {\n          "nginx.ingress.kubernetes.io/backend-protocol": "HTTPS",\n          "nginx.ingress.kubernetes.io/ssl-passthrough": "true"\n        }\n      },\n      "spec": {\n        "rules": [\n          {\n            "http": {\n              "paths": [\n                {\n                  "path": "/",\n                  "pathType": "Prefix",\n                  "backend": {\n                    "service": {\n                      "name": "argocd-server",\n                      "port": {\n                        "name": "https"\n                      }\n                    }\n                  }\n                }\n              ]\n            }\n          }\n        ]\n      }\n    }\n  },\n  "applications": {}\n}\n',
};
